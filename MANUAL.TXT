
正在整理

uint32_t zm_version_num(
    void
);

const char* zm_version_str(
    void
);

const char* zm_error_str(
    int32_t code
);

const void* zm_replace_fnc(
    const char* fname, 
    void* pfn
);

zmerror zm_pbkdf2 (
    void* (*hash_new)(void),
    void (*hash_free)(void* ctx),
    int32_t (*hash_digest_size)(void),
    int32_t (*hash_block_size)(void),
    void (*hash_init)(void* ctx),
    void (*hash_starts)(void* ctx),
    void (*hash_update)(void* ctx, uint8_t* data, uint32_t dlen),
    void (*hash_final)(void* ctx, uint8_t* output),
    uint8_t* p, 
    uint32_t plen, 
    uint8_t* s, 
    uint32_t slen, 
    uint32_t c, 
    uint8_t* dk, 
    uint32_t dklen
);

zmerror zm_blockpad_zero (
    uint8_t* data, 
    uint32_t dlen, 
    uint8_t* block, 
    uint32_t blen
);

zmerror zm_blockpad_iso10126 (
    uint8_t* data, 
    uint32_t dlen, 
    uint8_t* block, 
    uint32_t blen, 
    void (*rng_get_bytes) (uint8_t* data, uint32_t dlen)
);

zmerror zm_blockpad_ansix923 (
    uint8_t* data, 
    uint32_t dlen, 
    uint8_t* block, 
    uint32_t blen
);

zmerror zm_blockpad_pkcs7 (
    uint8_t* data, 
    uint32_t dlen, 
    uint8_t* block, 
    uint32_t blen
);

zmerror zm_blockdepad_zero(
    uint8_t* block, 
    uint32_t blen, 
    uint8_t* data, 
    uint32_t* dlen
);

zmerror zm_blockdepad_iso10126(
    uint8_t* block, 
    uint32_t blen, 
    uint8_t* data, 
    uint32_t* dlen
);

zmerror zm_blockdepad_ansix923(
    uint8_t* block, 
    uint32_t blen, 
    uint8_t* data, 
    uint32_t* dlen
);

zmerror zm_blockdepad_pkcs7(
    uint8_t* block, 
    uint32_t blen, 
    uint8_t* data, 
    uint32_t* dlen
);

zmerror zm_base64_encode(
    uint8_t *input, 
    uint32_t ilen, 
    uint8_t *output, 
    uint32_t *olen, 
    uint32_t options
);

zmerror zm_base64_decode(
    uint8_t *input, 
    uint32_t ilen, 
    uint8_t *output, 
    uint32_t *olen, 
    uint32_t options
);

CONTEXT_TYPE_PTR(crc32) zm_crc32_new(
    void
);

void zm_crc32_free(
    CONTEXT_TYPE_PTR(crc32) ctx
);

int32_t zm_crc32_checksum_size(
    void
);

void zm_crc32_init(
    CONTEXT_TYPE_PTR(crc32) ctx
);

void zm_crc32_starts(
    CONTEXT_TYPE_PTR(crc32)
);

void zm_crc32_update(
    CONTEXT_TYPE_PTR(crc32), 
    uint8_t* data, 
    uint32_t dlen
);

void zm_crc32_final(
    CONTEXT_TYPE_PTR(crc32), 
    uint8_t* output
);

CONTEXT_TYPE_PTR(md5) zm_md5_new(
    void
);

void zm_md5_free(
    CONTEXT_TYPE_PTR(md5) ctx
);

int32_t zm_md5_digest_size(
    void
);

int32_t zm_md5_block_size(
    void
);

void zm_md5_init(
    CONTEXT_TYPE_PTR(md5) ctx
);

void zm_md5_starts(
    CONTEXT_TYPE_PTR(md5)
);

void zm_md5_update(
    CONTEXT_TYPE_PTR(md5), 
    uint8_t* data, 
    uint32_t dlen
);

void zm_md5_final(
    CONTEXT_TYPE_PTR(md5), 
    uint8_t* output
);

CONTEXT_TYPE_PTR(sha1) zm_sha1_new(
    void
);

void zm_sha1_free(
    CONTEXT_TYPE_PTR(sha1) ctx
);

int32_t zm_sha1_digest_size(
    void
);

int32_t zm_sha1_block_size(
    void
);

void zm_sha1_init(
    CONTEXT_TYPE_PTR(sha1) ctx
);

void zm_sha1_starts(
    CONTEXT_TYPE_PTR(sha1) ctx
);

void zm_sha1_update(
    CONTEXT_TYPE_PTR(sha1), 
    uint8_t* data, 
    uint32_t dlen
);

void zm_sha1_final(
    CONTEXT_TYPE_PTR(sha1), 
    uint8_t* output
);

CONTEXT_TYPE_PTR(aes) zm_aes_new(
    void
);

void zm_aes_free(
    CONTEXT_TYPE_PTR(aes) ctx
);

void zm_aes_init(
    CONTEXT_TYPE_PTR(aes) ctx
);

int32_t zm_aes_block_size(
    void
);

int32_t zm_aes_ksize_min(
    void
);

int32_t zm_aes_ksize_max(
    void
);

int32_t zm_aes_ksize_multiple(
    void
);

zmerror zm_aes_set_ekey(
    CONTEXT_TYPE_PTR(aes) ctx, 
    uint8_t* key, 
    uint32_t ksize
);

zmerror zm_aes_set_dkey(
    CONTEXT_TYPE_PTR(aes) ctx, 
    uint8_t* key, 
    uint32_t ksize
);

void zm_aes_enc_block(
    CONTEXT_TYPE_PTR(aes) ctx, 
    uint8_t* plaintext, 
    uint8_t* ciphertext
);

void zm_aes_dec_block(
    CONTEXT_TYPE_PTR(aes) ctx, 
    uint8_t* ciphertext, 
    uint8_t* plaintext
);

CONTEXT_TYPE_PTR(blowfish) zm_blowfish_new(
    void
);

void zm_blowfish_free(
    CONTEXT_TYPE_PTR(blowfish) ctx
);

void zm_blowfish_init(
    CONTEXT_TYPE_PTR(blowfish) ctx
);

int32_t zm_blowfish_block_size(
    void
);

int32_t zm_blowfish_ksize_min(
    void
);

int32_t zm_blowfish_ksize_max(
    void
);

int32_t zm_blowfish_ksize_multiple(
    void
);

zmerror zm_blowfish_set_ekey(
    CONTEXT_TYPE_PTR(blowfish) ctx, 
    uint8_t* key, 
    uint32_t ksize
);

    zmerror zm_blowfish_set_dkey(
    CONTEXT_TYPE_PTR(blowfish) ctx, 
    uint8_t* key, 
    uint32_t ksize
);

void zm_blowfish_enc_block(
    CONTEXT_TYPE_PTR(blowfish) ctx, 
    uint8_t* plaintext, 
    uint8_t* ciphertext
);

void zm_blowfish_dec_block(
    CONTEXT_TYPE_PTR(blowfish) ctx, 
    uint8_t* ciphertext, 
    uint8_t* plaintext
);

CONTEXT_TYPE_PTR(des) zm_des_new(
    void
);

void zm_des_free(
    CONTEXT_TYPE_PTR(des) ctx
);

void zm_des_init(
    CONTEXT_TYPE_PTR(des) ctx
);

int32_t zm_des_block_size(
    void
);

int32_t zm_des_ksize_min(
    void
);

int32_t zm_des_ksize_max(
    void
);

int32_t zm_des_ksize_multiple(
    void
);

zmerror zm_des_set_ekey(
    CONTEXT_TYPE_PTR(des) ctx, 
    uint8_t* key, uint32_t ksize);
    zmerror zm_des_set_dkey(
    CONTEXT_TYPE_PTR(des) ctx, 
    uint8_t* key, 
    uint32_t ksize
);

void zm_des_enc_block(
    CONTEXT_TYPE_PTR(des) ctx, 
    uint8_t* plaintext, 
    uint8_t* ciphertext
);

void zm_des_dec_block(
    CONTEXT_TYPE_PTR(des) ctx, 
    uint8_t* ciphertext, 
    uint8_t* plaintext
);

CONTEXT_TYPE_PTR(twofish) zm_twofish_new(
    void
);

void zm_twofish_free(
    CONTEXT_TYPE_PTR(twofish) ctx
);

void zm_twofish_init(
    CONTEXT_TYPE_PTR(twofish) ctx
);

int32_t zm_twofish_block_size(
    void
);

int32_t zm_twofish_ksize_min(
    void
);

int32_t zm_twofish_ksize_max(
    void
);

int32_t zm_twofish_ksize_multiple(
    void
);

zmerror zm_twofish_set_ekey(
    CONTEXT_TYPE_PTR(twofish) ctx, 
    uint8_t* key, 
    uint32_t ksize
);

    zmerror zm_twofish_set_dkey(
    CONTEXT_TYPE_PTR(twofish) ctx, 
    uint8_t* key, 
    uint32_t ksize
);

void zm_twofish_enc_block(
    CONTEXT_TYPE_PTR(twofish) ctx, 
    uint8_t* plaintext, 
    uint8_t* ciphertext
);

void zm_twofish_dec_block(
    CONTEXT_TYPE_PTR(twofish) ctx, 
    uint8_t* ciphertext, 
    uint8_t* plaintext
);